{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{~this~}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}
import {request as __request} from '../core/request';
{{#if @root.useVersion}}
import { OpenAPI } from '../core/OpenAPI';
{{/if}}

export class {{{name}}}{{{@root.postfix}}} {

    {{#each operations}}
    public static {{{name}}}({{>parameters}}) {
        return __request<{{>result}}>({
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersCookie}}
            cookies: {
                {{#each parametersCookie}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            {{#equals parametersBody.in 'formData'}}
            formData: {{{parametersBody.name}}},
            {{/equals}}
            {{#equals parametersBody.in 'body'}}
            body: {{{parametersBody.name}}},
            {{/equals}}
            {{#if parametersBody.mediaType}}
            mediaType: '{{{parametersBody.mediaType}}}',
            {{/if}}
            {{/if}}
            {{#if responseHeader}}
            responseHeader: '{{{responseHeader}}}',
            {{/if}}
            {{#if errors}}
            errors: {
                {{#each errors}}
                {{{code}}}: `{{{description}}}`,
                {{/each}}
            },
            {{/if}}
        });
    }

    {{/each}}
}
